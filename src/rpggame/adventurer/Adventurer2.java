/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package rpggame.adventurer;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonIOException;
import java.io.File;
import java.io.IOException;
import java.io.Reader;
import java.io.Writer;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;
import rpggame.Main;
import rpggame.adventure.paths.BeginAdventure;
import rpggame.classes.Trade;

/**
 *
 * @author Mikey
 */
public class Adventurer2 extends javax.swing.JFrame {

    /**
     * Creates new form Adventurer2
     */
    public Adventurer2() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        ClassChoices = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setIcon(new javax.swing.ImageIcon("E:\\eclipse-workspace\\RPGGame\\src\\rpggame\\Wizard_Image.png")); // NOI18N
        jLabel1.setText("jLabel1");

        ClassChoices.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Fighter", "Wizard", "Rogue", "Barbarian" }));
        ClassChoices.setToolTipText("");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Select Class:");

        jButton1.setText("Continue");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ClassChoices, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(196, 196, 196)
                        .addComponent(jButton1)))
                .addGap(0, 329, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 561, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(102, 102, 102)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ClassChoices, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private Boolean cont = false;
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        createAdventurer(name);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Adventurer2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Adventurer2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Adventurer2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Adventurer2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            }
        });
    }
    
    	public static Main m = new Main();
	private static String name = "";
	private File file = new File("");
	private int i = 1;
	// private Class c = new Class();

        public void giveName(String n){
            name = n;
            new Adventurer2().setVisible(true);
            for(String classstr : classes){
                ClassChoices.addItem(classstr);
            }
        }
        
	public void createAdventurer(String n) {
		name = n;

		Gson gson = new GsonBuilder().setPrettyPrinting().create();
		file = new File(System.getProperty("user.dir") + "_" + n + ".json");
		try {
			if (this.file.createNewFile()) {
				Trade c = pickClass();
//				String path = this.file.getAbsolutePath();
				Map<String, Object> map = new HashMap<>();
				map.put("Name", name.substring(0, 1).toUpperCase() + name.substring(1).toLowerCase());
				map.put("Health", c.getClassHealth());
				map.put("Selection", c.name());
				map.put("Level", i);
				map.put("Milestone", 1);
				map.put("Armor", new String[] { "Helmet: ", "Chest: ", "Boots: " });
				map.put("Path", new int[] {});
				try {
					Writer writer = Files
							.newBufferedWriter(Paths.get(System.getProperty("user.dir") + "_" + n + ".json"));
					gson.toJson(map, writer);
					writer.close();
					BeginAdventure.introduceUser();
				} catch (IOException e) {
					e.printStackTrace();
				}
			} else {

			}
		} catch (JsonIOException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	public static AdventurerObject user() {
		try {
			Gson gson = new GsonBuilder().setPrettyPrinting().create();
			Reader reader2;
			reader2 = Files.newBufferedReader(Paths.get(System.getProperty("user.dir") + "_" + name + ".json"));
			AdventurerObject user = gson.fromJson(reader2, AdventurerObject.class);
			return user;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

         String[] classes = {"Fighter", "Wizard", "Rogue", "Barbarian"};
         
        
	public Trade pickClass() {
                String choice = null;
                choice = ClassChoices.getSelectedItem().toString();
//		System.out.printf(
//				"What class would you like to be?%n1) Figter (50 HP)%n2) Wizard (35 HP)%n3) Rogue (50 HP)%n4) Barbarian (75HP)%n>> ");
//		int i = m.scan.nextInt();
//		switch (i) {
//		case 1:
//			choice = "Fighter";
//			break;
//		case 2:
//			choice = "Wizard";
//			break;
//		case 3:
//			choice = "Rogue";
//			break;
//		case 4:
//			choice = "Barbarian";
//			break;
//		default:
//			System.out.println("Invalid class choice, please select again.");
//			pickClass();
//			break;
//		}
		Trade cla = Enum.valueOf(Trade.class, choice);
		return cla;
	}




    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ClassChoices;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables

}